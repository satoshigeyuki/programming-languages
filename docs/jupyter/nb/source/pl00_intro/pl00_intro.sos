<!--- md --->

#* プログラミング言語 演習環境

#* Programming Languages Hands-on Environment

<!--- end md --->

<!--- md w --->

名前と学生証番号を書け. Enter your name and student ID.

 * 名前 Name:
 * 学生証番号 Student ID:

<!--- end md --->

<!--- md --->

# このnotebookの使い方 / How this notebook works
<!--- end md --->

<!--- md --->
## セル / Cell

* 以下のような入力欄を「セル」という
* SHIFT+ENTERで実行できる
<br/>

* A textbox like below is called a "cell"
* Press SHIFT+ENTER to execute it

<!--- end md --->

<!--- md --->
## Python
<!--- end md --->

<!--- code w kernel=python --->
def f(x):
  return x + 1

f(3)
<!--- end code --->

<!--- md --->
* 実行中のセルは, 左に`[*]`と表示され, 終了すると`[2]`のような番号に変わる
* `[*]`が表示されている間は他のセルを実行できないことを覚えておこう
* 以下のセルを実行して`[*]`を観察しておくこと
<br/>

* while a cell is executing, `[*]` is shown on the left, which turns into a number like `[2]`
* remember that you cannot execute other cells while `[*]` is shown
* execute the cell below and observe `[*]`

<!--- end md --->

<!--- code w kernel=python --->
import time
time.sleep(3.0)
<!--- end code --->

<!--- md --->
* 実行中のセルを途中で止めたければタブ上部の■ボタンで止められることにはなっているが効かないことも多い
* その場合は, メニューの Kernel -&gt; Restart Kernel として **カーネルのリセット** をする
* より強力なリセット方法はメニューの File -&gt; Hub Control Panel -&gt; Stop Server ->&gt; Start Server として**サーバの再起動** をする
* 以下を実行し, 終了する前に■ボタンで止めてみよ
* カーネルのリセット, サーバの再起動も試してみよ
<br/>

* you should be able to stop an executing cell by ■ button at top of the tab, but do not expect it to work reliably
* if it doesn't work, **reset kernel** by going to menu and selecting Kernel -&gt; Restart Kernel
* even more powerful method to reset everything is to **restart the server** by going to menu and selecting File -&gt; Hub Control Panel -&gt; Stop Server -&gt; Start Server
* execute the cell below and stop it before it finishes by ■ button
* also try to reset kernel and restart server
<!--- end md --->

<!--- code w kernel=python --->
import time
time.sleep(10.0)
<!--- end code --->

<!--- md --->
## bash

* 下のセルはbash (Linuxのコマンドを実行できる)
* ただしバグがあって, 出力が正しく出ないことがある(おかしいなと思ったら何度か実行してみてください)
<br/>

* The cell below is bash, in which you can execute Linux commands
* There seems a bug that misses outputs.  Repeat executing several times when the output is suspicious.

<!--- end md --->

<!--- code w kernel=bash --->
# 表示されなかったらもう一回実行
# if the result is not displayed, execute it again
pwd
<!--- end code --->

<!--- code w kernel=bash --->
ls
<!--- end code --->

<!--- md --->
## text (markdown)

* コードではなくテキスト(マークダウン形式)を書くためのセル
* there are cells for ordinary texts (markdown format), not code

<!--- end md --->

<!--- md w --->
* ここをダブルクリックして編集してみよ
  * 編集し終えたらSHIFT-ENTERで保存
* double-click this cell and edit
  * after done, press SHIFT-ENTER to save
<!--- end md --->

<!--- md --->
# 注意: 解答用セルをコピーしないこと / Do not copy cells for answers

* Jupyter notebookにはセルを複製(コピー, ペースト)する機能があるがそれを使って解答を記入すべきセルのコピーを作ると, ノートブックが壊れてしまい採点ができなくなる
* Jupyter notebook allows you to duplicate (copy and paste) cells.  However, when you make a copy of cells for your answers, the notebook is broken and becomes impossible to grade

* 解答記入用のセルには`BEGIN SOLUTION`, `END SOLUTION`と書かれている. これらのセルを複製(コピー, ペースト)しないこと
* Cells for answers have `BEGIN SOLUTION`, `END SOLUTION` in them.  Do not duplicate (copy and paste) these cells

* 作業用にセルを新しく作ることは問題ない
* You can create new cells afresh for your work

# Validateボタン / Validate Button

* ページ上部Validateボタンを押すと以下がチェックされる
  1. notebookが壊れていないか(解答を記入すべきセルが複製されていないか)
  1. 解答を記入すべきセルに少しでも変更が施されているか
* When you press the Validate button near the page top, it checks
  1. if the notebook is not broken (i.e., you didn't duplicate answer cells), and 
  1. if each answer cell is modified in any way.

* Submitする前に押して確認すること
* Press the button before you submit it

* 解答が正解かどうかをチェックするわけではない
* It does not check if the answer is correct or not
<!--- end md --->

<!--- md --->

# この授業で使う言語 / Programming languages covered in this lecture

<!--- end md --->

<!--- md --->
## Go

### Jupyterで使う場合 / Using in Jupyter

* 以下のセルをクリックして右上の言語選択メニューに「Go」と表示されることを確認せよ
* Click the cell below and confirm "Go" is selected in the language menu on the right
* 以下を下のセルにコピーして実行してみよ
* Copy the following to the cell below and execute it
```
println("hello go")
```
<!--- end md --->

<!--- code w label=prob kernel=go points=1 --->
<!--- end code --->

<!--- code w label=ans kernel=go --->
println("hello go")
<!--- end code --->

<!--- md --->
### コマンドラインで使う場合 / Using in command line

* コマンドライン(JupyterターミナルやSSH)で使うには以下を(JupyterターミナルやSSHでログインした端末で)実行する
* to use in a command line (Jupyter terminal or SSH), execute the following (in the Jupyter terminal or SSH terminal)
```
export PATH=~/go/bin:$PATH
```
<br/>

* 毎回実行し直さなくて良いようにするには `~/.bashrc` に書いておく
* if you don't want to do it every time, put it in your `~/.bashrc`
<!--- end md --->

<!--- md --->
* 以下で`go`コマンドの場所 (`/home/uNNNNN/go/bin/go`) が表示されることを確認
* make sure the following command shows the location of `go` command (`/home/uNNNNN/go/bin/go`)
```
which go
```

<!--- end md --->

<!--- md --->
## Julia

### Jupyterで使う場合 / Using in Jupyter

* 以下のセルをクリックして右上の言語選択メニューに「Juila 1.10.2」と表示されることを確認せよ
* Click the cell below and confirm "Julia 1.10.2" is selected in the language menu on the right
* 以下を下のセルにコピーして実行してみよ
* Copy the following to the cell below and execute it
```
print("hello Julia")
```
<!--- end md --->

<!--- code w label=prob kernel=jl points=1 --->
<!--- end code --->

<!--- code w label=ans kernel=jl --->
print("hello Julia")
<!--- end code --->

<!--- md --->
### コマンドラインで使う場合 / Using in command line

* コマンドライン(JupyterターミナルやSSH)で使うには以下を(JupyterターミナルやSSHでログインした端末で)実行する
* to use in a command line (Jupyter terminal or SSH), execute the following (in the Jupyter terminal or SSH terminal)
```
export PATH=~/.juliaup/bin:$PATH
```
<br/>

* 毎回実行し直さなくて良いようにするには `~/.bashrc` に書いておく
* if you don't want to do it every time, put it in your `~/.bashrc`
<!--- end md --->

<!--- md --->
* 以下で`julia`コマンドの場所 (`/home/uNNNNN/.juliaup/bin/julia`) が表示されることを確認
* make sure the following command shows the location of `julia` command (`/home/uNNNNN/.juliaup/bin/julia`)
```
which julia
```
<!--- end md --->

<!--- md --->
## OCaml

### Jupyterで使う場合 / Using in Jupyter
<!--- end md --->

<!--- md --->

* 以下のセルをクリックして右上の言語選択メニューに「OCaml default」と表示されることを確認せよ
* Click the cell below and confirm "OCaml default" is selected in the language menu on the right
* 以下を下のセルにコピーして実行してみよ
* Copy the following to the cell below and execute it
```
Printf.printf("hello ocaml\n");
flush_all()
```
<!--- end md --->

<!--- code w label=prob kernel=ml points=1 --->
<!--- end code --->

<!--- code w label=ans kernel=ml --->
Printf.printf("hello ocaml\n");
flush_all()
<!--- end code --->

<!--- md --->
### コマンドラインで使う場合 / Using in command line

* コマンドライン(JupyterターミナルやSSH)で使うには以下を(JupyterターミナルやSSHでログインした端末で)実行する
* to use in a command line (Jupyter terminal or SSH), execute the following (in the Jupyter terminal or SSH terminal)
```
eval $(opam env)
```
<br/>

* 毎回実行し直さなくて良いようにするには `~/.bashrc` に書いておく
* if you don't want to do it every time, put it in your `~/.bashrc`
<!--- end md --->

<!--- md --->
* 以下で`ocaml`コマンドの場所 (`/home/uNNNNN/.opam/default/bin/ocaml`) が表示されることを確認
* make sure the following command shows the location of `ocaml` (`/home/uNNNNN/.opam/default/bin/ocaml`)
```
which ocaml
```
<!--- end md --->

<!--- md --->
## Rust

### Jupyterで使う場合 / Using in Jupyter

* 以下のセルをクリックして右上の言語選択メニューに「Rust」と表示されることを確認せよ
* Click the cell below and confirm "Rust" is selected in the language menu on the right
* 以下を下のセルにコピーして実行してみよ
* Copy the following to the cell below and execute it
```
println!("hello rust")
```
<!--- end md --->

<!--- code w label=prob kernel=rs points=1 --->
<!--- end code --->

<!--- code w label=ans kernel=rs --->
println!("hello rust")
<!--- end code --->

<!--- md --->
### コマンドラインで使う場合 / Using in command line

* コマンドライン(JupyterターミナルやSSH)で使うには以下を(JupyterターミナルやSSHでログインした端末で)実行する
* to use in a command line (Jupyter terminal or SSH), execute the following (in the Jupyter terminal or SSH terminal)
```
. ~/.cargo/env
```
<br/>

* 毎回実行し直さなくて良いようにするには `~/.bashrc` に書いておく
* if you don't want to do it every time, put it in your `~/.bashrc`
<!--- end md --->

<!--- md --->
* 以下で`cargo`, `rustc`コマンドの場所 (`/home/uNNNNN/.cargo/bin/cargo`, `/home/uNNNNN/.cargo/bin/rustc`) が表示されることを確認
* make sure the following command shows the location of `cargo` or `rustc` command (`/home/uNNNNN/go/bin/cargo` or `/home/uNNNNN/go/bin/rustc`)
```
which cargo
which rustc
```
<!--- end md --->

<!--- md --->

# Jupyter 端末環境 / Jupyter Terminals

* Jupyterの典型的な環境はこのようなページ(ノートブック)にプログラムを書いてそれを実行するというものだが, 自分でコマンドを打ち込んで実行できる環境(端末)も用意されている
* メニュー直下の「+」アイコンをクリックしてlauncherを表示
* Terminal を選ぶとコマンドラインが開く
* 使いたくなるかも知れない場面
  * man pageを閲覧する
  * 暴走して, ■ボタンを押しても止まらないプログラムを kill コマンドで殺す
<br/>

* A typical Jupyter environment executes programs in a page like this (notebook).  There is, however, an environment you type arbitrary commands (terminal)
* click the "+" icon right below the menu to show the launcher page
* select "Terminal" to open the command line terminal
* some circumstances in which you want to use it
  * you browse a man page
  * use kill command to terminate a program that does not stop with ■ button
<!--- end md --->


<!--- md --->

# SSH でログイン / Login with SSH

* ただしそれをやりたいなら SSH ログインをマスターする方がきっと良い
* 今すぐ必要ではないが後の週の課題で必要になる
* SSHログインのやり方は, [Jupyter環境の使い方](https://taura.github.io/operating-systems/html/jupyter.html)を参照
<br/>

* to do them, however, you probably want to master SSH login described below instead
* you don't have to do this immediately, but need it in later assignments
* see [How to access Jupyter environment](https://taura.github.io/operating-systems/html/jupyter.html?lang=en) for how to set up SSH
<!--- end md --->

